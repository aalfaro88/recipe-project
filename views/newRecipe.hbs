<h1>New Recipe</h1>
<form id="recipeForm" action="/users/recipes" method="POST">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name" required /><br />
  <label for="minutes">Minutes:</label>
  <input type="number" id="minutes" name="minutes" required /><br />
  <label for="description">Description:</label>
  <input type="text" id="description" name="description" required /><br />
  <label for="steps">Steps:</label>
  <textarea id="steps" name="steps" rows="4" cols="50" required></textarea><br />

  <label for="ingredients">Ingredients:</label>
  <textarea id="ingredients" name="ingredients" rows="4" cols="50" oninput="getAutocompletionOptions(this.value)" autocomplete="off" required></textarea>
  <div id="autocompletionOptions" class="dropdown-menu"></div>

  <button type="submit" id="createRecipeButton">Create Recipe</button>
</form>

<script>
  const ingredientsTextarea = document.getElementById('ingredients');
  const autocompletionOptions = document.querySelector('#autocompletionOptions');
  let currentOptionIndex = -1;

  ingredientsTextarea.addEventListener('input', (event) => {
    const value = event.target.value;
    getAutocompletionOptions(value);
  });

  document.addEventListener('click', (event) => {
    const isAutocompleteOption = event.target.closest('.dropdown-item');
    const isIngredientsTextarea = event.target === ingredientsTextarea;

    if (!isAutocompleteOption && !isIngredientsTextarea) {
      autocompletionOptions.style.display = 'none';
    }
  });

  function getAutocompletionOptions(value) {
    const lastLine = value.trim().split('\n').pop().trim();

    if (lastLine !== '') {
      fetch('/prediction?query=' + encodeURIComponent(lastLine))
        .then((response) => response.json())
        .then((data) => {
          autocompletionOptions.innerHTML = '';

          if (data.length > 0) {
            data.forEach((option, index) => {
              const listItem = document.createElement('div');
              listItem.classList.add('dropdown-item');
              listItem.textContent = option.ingredient;
              listItem.addEventListener('click', () => selectOption(index));
              autocompletionOptions.style.display = 'block';
              autocompletionOptions.appendChild(listItem);
            });
          } else {
            autocompletionOptions.style.display = 'none';
          }

          currentOptionIndex = -1;
          highlightOption(currentOptionIndex);
        });
    } else {
      autocompletionOptions.style.display = 'none';
    }
  }

  function highlightOption(index) {
    const options = autocompletionOptions.children;

    for (let i = 0; i < options.length; i++) {
      options[i].classList.toggle('highlighted', i === index);
    }
  }

  function selectOption(index) {
    const options = autocompletionOptions.children;

    if (index >= 0 && index < options.length) {
      const selectedOption = options[index];
      const selectedValue = selectedOption.textContent;
      addIngredientToList(selectedValue);
    }

    autocompletionOptions.style.display = 'none';
    currentOptionIndex = -1;
  }

  function addIngredientToList(ingredient) {
    const currentText = ingredientsTextarea.value.trim();
    const lines = currentText.split('\n');
    const lastLine = lines[lines.length - 1].trim();

    // Remove the last line from the textarea
    const updatedText = currentText.substring(0, currentText.lastIndexOf(lastLine));

    // Append the selected ingredient without duplication
    ingredientsTextarea.value = updatedText + ingredient + '\n';

    ingredientsTextarea.focus();
  }

  const createRecipeButton = document.getElementById('createRecipeButton');
  const requiredFields = Array.from(document.querySelectorAll('input[required], textarea[required]'));

  const recipeForm = document.getElementById('recipeForm');

  recipeForm.addEventListener('submit', async (event) => {
    event.preventDefault();
    const name = document.getElementById('name').value.trim();
    const minutes = document.getElementById('minutes').value.trim();
    const description = document.getElementById('description').value.trim();
    const steps = document.getElementById('steps').value.trim();
    const ingredients = ingredientsTextarea.value.trim().split('\n').map(line => line.trim());

    try {
      // Send a POST request to the server to create the recipe
      const response = await fetch('/users/recipes', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ name, minutes, description, steps, ingredients })
      });

      if (response.ok) {
        // Recipe creation successful, redirect to the profile page
        window.location.href = '/users';
      } else {
        // Recipe creation failed, display an error message
        console.error('Failed to create recipe:', response.status);
        // Display an error message to the user
      }
    } catch (error) {
      console.error('Error creating recipe:', error);
      // Display an error message to the user
    }
  });

  function checkRequiredFields() {
    const areFieldsComplete = requiredFields.every(field => field.value.trim() !== '');
    createRecipeButton.disabled = !areFieldsComplete;
  }

  requiredFields.forEach(field => {
    field.addEventListener('input', checkRequiredFields);
    field.addEventListener('blur', checkRequiredFields);
  });

  checkRequiredFields();
</script>

<style>
  .dropdown-menu {
    position: absolute;
    display: none;
    z-index: 1000;
    padding: 0;
    margin: 0;
    list-style: none;
    background-color: #fff;
    border: 1px solid rgba(0, 0, 0, 0.15);
    border-radius: 0.25rem;
  }

  .dropdown-item {
    display: block;
    padding: 0.5rem 1rem;
    clear: both;
    font-weight: 400;
    color: #212529;
    text-align: inherit;
    white-space: nowrap;
    background-color: transparent;
    border: 0;
    cursor: pointer;
  }

  .dropdown-item:hover,
  .dropdown-item.highlighted {
    background-color: #f8f9fa;
  }
</style>
